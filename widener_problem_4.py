# -*- coding: utf-8 -*-
"""Widener Problem 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KnkqQ9OAtMjhEnodlD8iUiN4N81u9WaE
"""

import numpy

target = 16
numDenoms = 5
denoms = [1,2,4,8,16]
denomsDivided = []
denomsDividedAndOne = []
combinations = []
total = 0

for i in denoms:
  denomsDivided.append(target // i)

for i in denomsDivided:
  denomsDividedAndOne.append(i+1)

for i in range(int(numpy.prod(denomsDividedAndOne))):
  combinations.append([])

for i in range(int(numpy.prod(denomsDividedAndOne))):
  saveNum = i
  for denom in range(numDenoms):
    modNum = int(numpy.prod(denomsDividedAndOne))/int(numpy.prod(denomsDividedAndOne[:denom+1]))
    num = saveNum // modNum
    combinations[i].append(int(num))
    saveNum -= modNum*num

for i in combinations:
  summation = 0
  for j in range(len(i)):
    summation += denoms[j]*i[j]
  if summation == target:
    total += 1

print(total)